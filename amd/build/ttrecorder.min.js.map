{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttaudiohelper', 'core/notification',\n    'mod_readaloud/ttbrowserrec','core/str','mod_readaloud/timer' ],\n    function ($, log, audioHelper, notification, browserRec, str, timer) {\n        \"use strict\"; // jshint ;_;\n        /*\n        *  The TT recorder\n         */\n\n        log.debug('TT Recorder: initialising');\n\n        return {\n            waveHeight: 75,\n            audio: {\n                stream: null,\n                blob: null,\n                dataURI: null,\n                start: null,\n                end: null,\n                isRecording: false,\n                isRecognizing: false,\n                transcript: null\n            },\n            submitting: false,\n            owner: '',\n            controls: {},\n            uniqueid: null,\n            audio_updated: null,\n            maxTime: 15000,\n            passagehash: null,\n            region: null,\n            asrurl: null,\n            lang: null,\n            browserrec: null,\n            usebrowserrec: false,\n            currentTime: 0,\n            stt_guided: false,\n            currentPrompt: false,\n            strings: {},\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            init: function(opts){\n\n                var that = this;\n                this.uniqueid=opts['uniqueid'];\n                this.callback=opts['callback'];\n                this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n                this.shadow = opts['shadow'];\n                this.init_strings();\n                this.prepare_html();\n                this.controls.recordercontainer.show();\n                this.register_events();\n\n                //set up events\n                var on_gotstream=  function(stream) {\n                    var newaudio={stream: stream, isRecording: true};\n                    that.update_audio(newaudio);\n\n                };\n\n                  // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                log.debug('timer_seconds: ' + that.timer.seconds);\n                log.debug('displaytime: ' + displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    if(that.usebrowserrec){\n                        that.browserrec.stop();\n                    }else{\n                        that.audiohelper.stop();\n                    }\n                }\n            };\n\n            // Callback: Recorder device errors.\n                var on_error = function(error) {\n                    switch (error.name) {\n                        case 'PermissionDeniedError':\n                        case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                            break;\n                        case 'DevicesNotFoundError':\n                        case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                            break;\n                        default:\n                            //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                            //notification.alert(\"Error\", error.name, \"OK\");\n                            log.debug(\"Error\", error.name);\n                    }\n                };\n\n            // Callback: Recording stopped.\n                var on_stopped = function(blob) {\n                    that.timer.stop()\n\n                    //if the blob is undefined then the user is super clicking or something\n                    if(blob===undefined){\n                        return;\n                    }\n\n                    //if ds recc\n                    var newaudio = {\n                        blob: blob,\n                        dataURI: URL.createObjectURL(blob),\n                        end: new Date(),\n                        isRecording: false,\n                        length: Math.round((that.audio.end - that.audio.start) / 1000),\n                    };\n                    that.update_audio(newaudio);\n\n                    that.deepSpeech2(that.audio.blob, function(response){\n                        log.debug(response);\n                        if(response.data.result===\"success\" && response.data.transcript){\n                            that.gotRecognition(response.data.transcript.trim());\n                        } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                        }\n                        that.update_audio('isRecognizing',false);\n                    });\n\n                };\n\n                //If browser rec (Chrome Speech Rec) (and ds is optiona)\n                if(browserRec.will_work_ok() && ! this.stt_guided){\n                    //Init browserrec\n                    log.debug(\"using browser rec\");\n                    this.browserrec = browserRec.clone();\n                    this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                    this.usebrowserrec=true;\n\n                    //set up events\n                    that.browserrec.onerror = on_error;\n                    that.browserrec.onend = function(){\n                        //do something here\n                    };\n                    that.browserrec.onstart = function(){\n                        //do something here\n                    };\n                    that.browserrec.onfinalspeechcapture=function(speechtext){\n                        that.gotRecognition(speechtext);\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',false);\n                    };\n\n                    that.browserrec.oninterimspeechcapture=function(speechtext){\n                        that.gotInterimRecognition(speechtext);\n                    };\n\n                    //If DS rec\n                }else {\n                    //set up wav for ds rec\n                    log.debug(\"using ds rec\");\n                    this.audiohelper =  audioHelper.clone();\n                    this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                    that.audiohelper.onError = on_error;\n                    that.audiohelper.onStop = on_stopped;\n                    that.audiohelper.onStream = on_gotstream;\n\n                }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxTime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_readaloud'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_readaloud'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_readaloud'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n            prepare_html: function(){\n                this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n                this.controls.recorderbutton = $('#ttrec_' + this.uniqueid + '_recorderdiv');\n                this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n                this.passagehash =this.controls.recorderbutton.data('passagehash');\n                this.region=this.controls.recorderbutton.data('region');\n                this.asrurl=this.controls.recorderbutton.data('asrurl');\n                this.lang =this.controls.recorderbutton.data('lang');\n                this.maxTime=this.controls.recorderbutton.data('maxtime');\n                this.waveHeight=this.controls.recorderbutton.data('waveheight');\n            },\n\n            silence_detected: function(){\n                if(this.audio.isRecording){\n                    this.toggleRecording();\n                }\n            },\n\n            update_audio: function(newprops,val){\n                \n                if (typeof newprops === 'string') {\n                    log.debug('update_audio:' + newprops + ':' + val);\n                    if (this.audio[newprops] !== val) {\n                        this.audio[newprops] = val;\n                        this.audio_updated();\n                    }\n                }else{\n                    for (var theprop in newprops) {\n                        this.audio[theprop] = newprops[theprop];\n                        log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                    }\n                    this.audio_updated();\n                }\n            },\n\n            register_events: function(){\n                var that = this;\n\n                this.controls.recordercontainer.click(function(){\n                    that.toggleRecording();\n                });\n\n                this.controls.recordercontainer.keypress(function(){\n                    that.toggleRecording();\n                });\n\n                this.audio_updated=function() {\n                    //pointer\n                    if (that.audio.isRecognizing) {\n                        that.show_recorder_pointer('none');\n                    } else {\n                        that.show_recorder_pointer('auto');\n                    }\n\n                    if(that.audio.isRecognizing || that.audio.isRecording ) {\n                        this.controls.recorderbutton.css('background', '#e52');\n                    }else{\n                        this.controls.recorderbutton.css('background', 'green');\n                    }\n\n                    //div content WHEN?\n                    that.controls.recorderbutton.html(that.recordBtnContent());\n                };\n\n            },\n\n            show_recorder_pointer: function(show){\n                if(show) {\n                    this.controls.recorderbutton.css('pointer-events', 'none');\n                }else{\n                    this.controls.recorderbutton.css('pointer-events', 'auto');\n                }\n\n            },\n\n\n            gotRecognition:function(transcript){\n                log.debug('transcript:' + transcript);\n                var message={};\n                message.type='speech';\n                message.capturedspeech = transcript;\n                //POINT\n                this.callback(message);\n            },\n\n            gotInterimRecognition:function(transcript){\n                var message={};\n                message.type='interimspeech';\n                message.capturedspeech = transcript;\n            //POINT\n                this.callback(message);\n            },\n\n            cleanWord: function(word) {\n                return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n            },\n\n            recordBtnContent: function() {\n\n                if(!this.audio.isRecognizing){\n\n                    if (this.audio.isRecording) {\n                        return '<i class=\"fa fa-stop\">';\n                    } else {\n                        return '<i class=\"fa fa-microphone\">';\n                    }\n\n                } else {\n                    return '<i class=\"fa fa-spinner fa-spin\">';\n                }\n            },\n            toggleRecording: function() {\n                var that =this;\n\n                //If we are recognizing, then we want to discourage super click'ers\n                if (this.audio.isRecognizing) {\n                      return;\n                }\n\n                //If we are current recording\n                if (this.audio.isRecording) {\n                    that.timer.stop();\n\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',true);\n                        this.browserrec.stop();\n\n                        //If using DS rec\n                    }else{\n                        this.update_audio('isRecognizing',true);\n                        this.audiohelper.stop();\n                    }\n\n                    //If we are NOT currently recording\n                } else {\n                    // Run the timer\n                    that.currentTime = 0;\n                    that.timer.reset();\n                    that.timer.start();\n                \n\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        this.update_audio('isRecording',true);\n                        this.browserrec.start();\n\n\n                        //If using DS Rec\n                    }else {\n                        var newaudio = {\n                            stream: null,\n                            blob: null,\n                            dataURI: null,\n                            start: new Date(),\n                            end: null,\n                            isRecording: false,\n                            isRecognizing:false,\n                            transcript: null\n                        };\n                        this.update_audio(newaudio);\n                        this.audiohelper.start(this.shadow);\n                    }\n\n                    //lets notify the caller we stopped recording\n                    log.debug('recording started:');\n                    var message={};\n                    message.type='recordingstarted';\n                    that.callback(message);\n                }\n            },\n\n\n            deepSpeech2: function(blob, callback) {\n                var bodyFormData = new FormData();\n                var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n                bodyFormData.append('audioFile', blob, blobname);\n                bodyFormData.append('scorer', this.passagehash);\n                bodyFormData.append('lang', this.lang);\n                bodyFormData.append('wwwroot', M.cfg.wwwroot);\n                if(this.stt_guided) {\n                    bodyFormData.append('strictmode', 'false');\n                }else{\n                    bodyFormData.append('strictmode', 'true');\n                }\n                //prompt is used by whisper and other transcibers down the line\n                if(this.currentPrompt!==false){\n                    bodyFormData.append('prompt', this.currentPrompt);\n                }\n\n                var oReq = new XMLHttpRequest();\n                oReq.open(\"POST\", this.asrurl, true);\n                oReq.onUploadProgress= function(progressEvent) {};\n                oReq.onload = function(oEvent) {\n                    if (oReq.status === 200) {\n                        callback(JSON.parse(oReq.response));\n                    } else {\n                        callback({data: {result: \"error\"}});\n                        log.debug(oReq.error);\n                    }\n                };\n                try {\n                    oReq.send(bodyFormData);\n                }catch(err){\n                    callback({data: {result: \"error\"}});\n                    log.debug(err);\n                }\n            },\n\n        };//end of return value\n\n    });"],"names":["define","$","log","audioHelper","notification","browserRec","str","timer","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxTime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","shadow","init_strings","prepare_html","recordercontainer","show","register_events","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","stop","audiohelper","on_error","error","name","alert","allowmicaccess","nomicdetected","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","oninterimspeechcapture","gotInterimRecognition","onError","onStop","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","onStream","get_strings","done","s","i","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","keypress","show_recorder_pointer","css","recordBtnContent","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"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"}