{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\r\n    \"use strict\"; // jshint ;_;\r\n\r\n    log.debug('Corrections Markup: initialising');\r\n\r\n    return {\r\n        //controls\r\n\r\n        controls: {},\r\n\r\n        //class definitions\r\n        cd: {\r\n            insertclass: 'mod_readaloud_finediffinsertion',\r\n            passagewordclass: 'mod_readaloud_mu_passage_word',\r\n            passagespaceclass: 'mod_readaloud_mu_passage_space',\r\n            //previously removed\r\n            wordclass: 'mod_readaloud_mu_corrections_word',\r\n            spaceclass: 'mod_readaloud_mu_corrections_space',\r\n            originalprewordclass: 'mod_readaloud_mu_original_preword',\r\n            originalpostwordclass: 'mod_readaloud_mu_original_postword',\r\n            suggestionclass: 'mod_readaloud_corrections_suggestedword',\r\n            insertionclass: 'mod_readaloud_corrections_insertionword',\r\n            wordomittedclass: 'mod_readaloud_corrections_omittedword',\r\n            aiunmatched: 'mod_readaloud_aiunmatched',\r\n            aicorrected: 'mod_readaloud_aicorrected',\r\n            aiomitted: 'mod_readaloud_aiomitted',\r\n            aiinserted: 'mod_readaloud_aiinserted',\r\n            aisuggested: 'mod_readaloud_aisuggested',\r\n        },\r\n\r\n        options: {\r\n            errorwords: {},\r\n            grammarmatches: {},\r\n            suggestedwords: {},\r\n            insertioncount: 0\r\n        },\r\n\r\n\r\n        init: function (config) {\r\n\r\n            //pick up opts from html\r\n            var theid = '#' + config['id'];\r\n            var configcontrol = $(theid).get(0);\r\n            if (configcontrol) {\r\n                var opts = JSON.parse(configcontrol.value);\r\n                log.debug(opts);\r\n                $(theid).remove();\r\n\r\n                if (opts['sessionerrors'] !== '') {\r\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\r\n                } else {\r\n                    this.options.suggestedwords = {};\r\n                }\r\n                if (opts['sessionmatches'] !== '') {\r\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\r\n                } else {\r\n                    this.options.grammarmatches  = {};\r\n                }\r\n\r\n                if (opts['insertioncount'] !== '') {\r\n                    this.options.insertioncount = opts['insertioncount'];\r\n                }else{\r\n                    this.options.insertioncount = 0;\r\n                }\r\n\r\n\r\n            } else if(config.hasOwnProperty('grammarerrors') &&\r\n                config.hasOwnProperty('grammarmatches')&&\r\n                config.hasOwnProperty('insertioncount') &&\r\n                config.hasOwnProperty('correctionscontainer')){\r\n                    this.controls.correctionscontainer  = config['correctionscontainer'];\r\n                    this.options.suggestedwords = JSON.parse(config['grammarerrors']);\r\n                    this.options.grammarmatches = JSON.parse(config['grammarmatches']);\r\n                    this.options.insertioncount = config['insertioncount'];\r\n\r\n            } else {\r\n                //if there is no config we might as well give up\r\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\r\n                return;\r\n            }\r\n\r\n\r\n            log.debug(this.options);\r\n\r\n            //markup suggested words\r\n            this.markup_suggestedwords();\r\n            //mark up unmatched words\r\n            this.markup_unmatchedwords();\r\n            //fill original words\r\n            this.markup_originalwords();\r\n\r\n            //register events\r\n            this.register_events();\r\n\r\n        },\r\n\r\n\r\n        register_events: function () {\r\n            var that = this;\r\n            //classes to apply mouseover/click events to\r\n            var highlightclasses='.' + this.cd.wordclass + ',.' + this.cd.spaceclass + \r\n                ',.' + this.cd.originalprewordclass + ',.' + this.cd.originalpostwordclass;\r\n\r\n            //set up event handlers\r\n            this.controls.correctionscontainer.on('click',highlightclasses, function () {\r\n                var tpositions = $(this).attr('data-tpositions');\r\n                log.debug(tpositions);\r\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\r\n\r\n                var correctiontype = '';//defaults to none .. its just highlighting\r\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\r\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\r\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\r\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\r\n\r\n                that.highlightoriginal(tpositions,correctiontype);\r\n                setTimeout(function () {\r\n                    that.dehighlightoriginal(tpositions);\r\n                }, 1000);\r\n            });\r\n\r\n            // Use mouseover event for highlighting\r\n            this.controls.correctionscontainer.on('mouseover',highlightclasses,  function () {\r\n                var tpositions = $(this).attr('data-tpositions');\r\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\r\n\r\n                var correctiontype = '';//defaults to none .. its just highlighting and not corrected\r\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\r\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\r\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\r\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\r\n\r\n                that.highlightoriginal(tpositions, correctiontype);\r\n            });\r\n\r\n            // Use mouseout event for de-highlighting\r\n            this.controls.correctionscontainer.on('mouseout',highlightclasses,  function () {\r\n                var tpositions = $(this).attr('data-tpositions');\r\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\r\n                that.dehighlightoriginal(tpositions);\r\n            });\r\n        },\r\n\r\n        highlightoriginal: function (tpositionstring, correctiontype) {\r\n            var that = this;\r\n            var tpositions = tpositionstring.split(',');\r\n\r\n            //correction classes\r\n            var correctionsclasses = [];\r\n            correctionsclasses.push(that.cd.aicorrected);\r\n            if(correctiontype==='insertion') {\r\n                correctionsclasses.push(that.cd.aiinserted);\r\n            }else if(correctiontype==='omission') {\r\n                correctionsclasses.push(that.cd.aiomitted);\r\n            }else if (correctiontype==='suggestion') {\r\n                correctionsclasses.push(that.cd.aisuggested);\r\n            }\r\n\r\n            for (var i = 0; i < tpositions.length; i++) {\r\n                var tposition = tpositions[i];\r\n                if(correctiontype==='insertion') {\r\n                    //if the word is an insertion, then we only highlight spaces, because no word is altered in the original\r\n                    $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\r\n                } else {\r\n                    $('#' + that.cd.passagewordclass + '_' + tposition).addClass(correctionsclasses);\r\n                    //to highlight connecting spaces we check if we are between tpositions\r\n                    if(i < tpositions.length - 1) {\r\n                        $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        dehighlightoriginal: function (tpositionstring) {\r\n            var that = this;\r\n            var correctionsclasses = [that.cd.aicorrected, that.cd.aiinserted, that.cd.aiomitted, that.cd.aisuggested];\r\n            var tpositions = tpositionstring.split(',');\r\n            $.each(tpositions, function (index, tposition) {\r\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(correctionsclasses);\r\n                $('#' + that.cd.passagespaceclass + '_' + tposition).removeClass(correctionsclasses);\r\n            });\r\n        },\r\n\r\n        markup_suggestedwords: function () {\r\n            var m = this;\r\n            $.each(m.options.suggestedwords, function (index) {\r\n                  m.controls.correctionscontainer.find(' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\r\n                }\r\n            );\r\n            //sadly the above code only takes us to the last match. NOT to the last suggestion\r\n            //so from the last match to the end of passage (if there are any words left) we mark those up too\r\n            //we use the insertion count to guess the transcript indexes of end words. This is used to highlight passage on mouseover in view summary\r\n            //m.options.grammarmatches is js object, so we can't use array functions on it.\r\n            if(Object.keys(m.options.grammarmatches).length > 0) {\r\n                var lastpposition=0;\r\n                var lasttposition=0;\r\n                $.each(m.options.grammarmatches, function (index, lastmatch) {\r\n                    lastpposition = Number(lastmatch.pposition);\r\n                    lasttposition = Number(lastmatch.tposition);\r\n                });\r\n                var lastwordnumber = Number(lastpposition);\r\n                var tpositions = [];\r\n                for(var i = lasttposition + 1; i <= lasttposition + m.options.insertioncount + 1; i++) {\r\n                    tpositions.push(i);\r\n                }\r\n                var allwords = m.controls.correctionscontainer.find('.' + m.cd.wordclass);\r\n                allwords.filter(function() {\r\n                    var wordNumber = Number($(this).data('wordnumber'));\r\n                    return wordNumber > lastwordnumber && !$(this).hasClass(m.cd.suggestionclass);\r\n                }).addClass(m.cd.suggestionclass).attr('data-tpositions', tpositions.join(','));\r\n            }\r\n        },\r\n\r\n        //now we step through all the matched words, and look for \"gaps\"\r\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\r\n        //so we highlight the space where the missing word would have been\r\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\r\n        //NB tposition is the position in the original text.\r\n        //NB pposition is the position in the corrected text.\r\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\r\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\r\n        markup_unmatchedwords: function () {\r\n            var that = this;\r\n            if (this.options.grammarmatches) {\r\n                //we need a dummy prevmatch for the first loop\r\n                var prevmatch = {tposition: 0, pposition: 0};\r\n                $.each(this.options.grammarmatches, function (index, match) {\r\n                    //if there is a gap since the previous word match in the tposition\r\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\r\n                    // it's a missing word (ie in original but not in the corrected text)\r\n                    //we want to get the prior space and highlight it to show its missing\r\n                    if((match.tposition - prevmatch.tposition)>1) {\r\n                        var missingwordspacenumber = match.pposition - 1;\r\n                        if(missingwordspacenumber>0) {\r\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\r\n                            //and it's not either side of a suggested word, then highlight\r\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\r\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\r\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\r\n                            }\r\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\r\n                            var tpositions = [];\r\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\r\n                                tpositions.push(i);\r\n                            }\r\n                            //loop through the words and spaces that make up the gap and record the tpositions\r\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\r\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\r\n                            if(p_gapcount ===0) {\r\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\r\n                            }else{\r\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\r\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\r\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\r\n                                 //   $('#' + that.cd.originalprewordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\r\n                                 //   $('#' + that.cd.originalpostwordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\r\n                                }\r\n                            }\r\n                        }\r\n                    }else if(match.pposition - prevmatch.pposition > 1) {\r\n                        //if there is a gap in the pposition, then we have an extra word in the corrected text\r\n                        //we want to highlight the space where the extra word would have been in the original text\r\n                        //eg original \"one two three four five\" corrected to \"one two twopointfive three four five\"\r\n                        // we want to highlight the space between \"two\" and \"three\" in original since the p position has jumped by more than one\r\n                        for (var insertedword = prevmatch.pposition + 1; insertedword < match.pposition; insertedword++) {\r\n                            $('#' + that.cd.wordclass + '_' + insertedword).addClass(that.cd.insertionclass);\r\n                            $('#' + that.cd.wordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\r\n                          //  $('#' + that.cd.originalprewordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\r\n                          //  $('#' + that.cd.originalpostwordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\r\n                        }\r\n                    }\r\n\r\n                    //Always mark up the current words tposition as well\r\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\r\n                   // $('#' + that.cd.originalprewordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\r\n                   // $('#' + that.cd.originalpostwordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\r\n                    //store this match as the new prevmatch so on the next loop pass we can compare\r\n                    prevmatch = match;\r\n                });//end of $ each loop\r\n            }\r\n        },\r\n\r\n        //original CSS classes\r\n        //The original classes are to show the original passage word before or after the corrections word\r\n        //because of the layout, \"rewritten/added words\" [corrections] will show in green, after the original words [red]\r\n        //but \"removed(omitted) words\" [corrections] will show as a green space  after the original words [red]\r\n        // so the span layout for each word in the corrections is:\r\n        // [original_preword][correctionsword][original_postword][correctionsspace]\r\n        // suggested word: (original)He eat apples => (corrected)He eats apples => \r\n        //    [original_preword: \"eat->\"][correctionsword: \"eats\"][original_postword][correctionsspace]\r\n        // removed(omitted) word: (original)He eat devours the apples=> (corrected) He devours the apples =>\r\n        //    [original_preword: ][correctionsword: \"He\"][original_postword: \"eat->\" ][correctionsspace: \" \"]\r\n        markup_originalwords: function () {\r\n            var that = this;\r\n            var processed_tpositions=[];\r\n            var allwordsspaces = that.controls.correctionscontainer.find('.' + that.cd.wordclass + ', .' + that.cd.spaceclass);\r\n            allwordsspaces.each(function () {\r\n                var wordnumber = Number($(this).data('wordnumber'));\r\n                if($(this).hasClass(that.cd.suggestionclass)||$(this).hasClass(that.cd.wordomittedclass)){\r\n                    var data_tpositions=$(this).attr('data-tpositions');\r\n                    //if we already added originals, we dont want to do it again, \r\n                    //eg (original)I the happy man => (corrections)I am a happy man\r\n                    // we only want to add original \"the\" on corrections \"am\" .. and not also on \"a\"\r\n                    if(processed_tpositions.includes(data_tpositions)){return;}\r\n                    processed_tpositions.push(data_tpositions);\r\n\r\n                    var tpositions = data_tpositions.split(',');\r\n                    var originalwords=[];\r\n                    for (var i = 0; i < tpositions.length; i++) {\r\n                        var tposition = tpositions[i];\r\n                        originalwords.push($('#' + that.cd.passagewordclass + '_' + tposition).text());\r\n                    }\r\n                    \r\n                    if(originalwords.length>0){\r\n                        var originaltext=originalwords.join(' ') + '->';\r\n                        if($(this).hasClass(that.cd.suggestionclass) && $(this).hasClass(that.cd.insertionclass)) {\r\n                            //if it is an inserted word a underscore(since original does not exist) shows before the current word\r\n                            //a space would be better, but then it would be 2 spaces which html collapses to 1 so it would be invisible\r\n                            $('#' + that.cd.originalprewordclass + '_' + wordnumber).text('_->');\r\n                            $('#' + that.cd.originalprewordclass + '_' + (wordnumber)).attr('data-tpositions', '');\r\n                        }else if($(this).hasClass(that.cd.suggestionclass)){\r\n                            //if it is a suggested word it shows before the current word (green highlighted)\r\n                            $('#' + that.cd.originalprewordclass + '_' + wordnumber).text(originaltext);\r\n                            $('#' + that.cd.originalprewordclass + '_' + (wordnumber)).attr('data-tpositions',data_tpositions);\r\n                        }else if($(this).hasClass(that.cd.wordomittedclass)){\r\n                            //if it is an omitted word it shows after the current word (and before the green highlighted space)\r\n                            //since we are before the space we prepend a space so it doesn't run on after current word\r\n                            $('#' + that.cd.originalpostwordclass + '_' + (wordnumber)).text(' ' + originaltext);\r\n                            $('#' + that.cd.originalpostwordclass + '_' + (wordnumber)).attr('data-tpositions',data_tpositions);\r\n                        }\r\n                    }\r\n                  \r\n                }\r\n            });\r\n        },\r\n    };\r\n});"],"names":["define","$","log","debug","controls","cd","insertclass","passagewordclass","passagespaceclass","wordclass","spaceclass","originalprewordclass","originalpostwordclass","suggestionclass","insertionclass","wordomittedclass","aiunmatched","aicorrected","aiomitted","aiinserted","aisuggested","options","errorwords","grammarmatches","suggestedwords","insertioncount","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","hasOwnProperty","correctionscontainer","this","markup_suggestedwords","markup_unmatchedwords","markup_originalwords","register_events","that","highlightclasses","on","tpositions","attr","correctiontype","hasClass","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","correctionsclasses","push","i","length","tposition","addClass","each","index","removeClass","m","find","wordnumber","Object","keys","lastpposition","lasttposition","lastmatch","Number","pposition","lastwordnumber","filter","data","join","prevmatch","match","missingwordspacenumber","z","insertedword","processed_tpositions","data_tpositions","includes","originalwords","text","originaltext"],"mappings":"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"}