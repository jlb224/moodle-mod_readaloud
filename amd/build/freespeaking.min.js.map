{"version":3,"file":"freespeaking.min.js","sources":["../src/freespeaking.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/definitions','mod_readaloud/cloudpoodllloader',\r\n    'mod_readaloud/ttrecorder', 'mod_readaloud/correctionsmarkup', 'core/templates'],\r\n    function($, log, def, cloudpoodll, ttrecorder, correctionsmarkup, templates) {\r\n  \"use strict\"; // jshint ;_;\r\n\r\n  /*\r\n  This file is to manage the free speaking item type\r\n   */\r\n\r\n  log.debug('Readaloud FreeSpeaking: initialising');\r\n\r\n  return {\r\n\r\n     transcript_evaluation: null,\r\n     rawscore: 0,\r\n     percentscore: 0,\r\n\r\n    //for making multiple instances\r\n      clone: function () {\r\n          return $.extend(true, {}, this);\r\n     },\r\n\r\n    init: function(index, itemdata, quizhelper) {\r\n      this.itemdata = itemdata;\r\n      this.quizhelper = quizhelper;\r\n      this.init_components(quizhelper,itemdata);\r\n      this.register_events(index, itemdata, quizhelper);\r\n\r\n    },\r\n\r\n    next_question: function() {\r\n      var self = this;\r\n      var stepdata = {};\r\n      stepdata.index = self.index;\r\n      stepdata.hasgrade = true;\r\n      stepdata.totalitems = self.itemdata.totalmarks;\r\n      stepdata.correctitems = self.rawscore > 0 ? self.rawscore : 0;\r\n      stepdata.grade = self.percentscore;\r\n      stepdata.resultsdata = self.transcript_evaluation;\r\n      self.quizhelper.do_next(stepdata);\r\n    },\r\n\r\n    calculate_score: function(transcript_evaluation) {\r\n      var self = this;\r\n\r\n      if(transcript_evaluation === null){\r\n        return 0;\r\n      }\r\n\r\n      //words ratio\r\n      var wordsratio = 1;\r\n      if(self.itemdata.countwords) {\r\n        wordsratio = transcript_evaluation.stats.words / self.itemdata.targetwordcount;\r\n        if(wordsratio > 1){wordsratio = 1;}\r\n      }\r\n\r\n      //relevance\r\n      var relevanceratio = 1;\r\n      if(self.itemdata.relevance > 0){\r\n        relevanceratio = (transcript_evaluation.stats.relevance + 10) / 100;\r\n        if(relevanceratio > 1){relevanceratio = 1;}\r\n      }\r\n      //calculate score based on AI grade * relevance * wordcount\r\n      var score = Math.round(transcript_evaluation.marks * relevanceratio * wordsratio);\r\n      return score;\r\n    },\r\n\r\n    register_events: function(index, itemdata, quizhelper) {\r\n      \r\n      var self = this;\r\n      self.index = index;\r\n      self.quizhelper = quizhelper;\r\n      var nextbutton = $(\"#\" + itemdata.uniqueid + \"_container .readaloud_nextbutton\");\r\n      \r\n      nextbutton.on('click', function(e) {\r\n        self.next_question();\r\n      });\r\n\r\n    },\r\n\r\n    init_components: function(quizhelper,itemdata){\r\n      var self=this;\r\n      self.allwords = $(\"#\" + self.itemdata.uniqueid + \"_container.mod_readaloud_mu_passage_word\");\r\n      self.thebutton = \"thettrbutton\"; // To Do impl. this\r\n      self.wordcount = $(\"#\" + self.itemdata.uniqueid + \"_container span.ml_wordcount\");\r\n      self.actionbox = $(\"#\" + self.itemdata.uniqueid + \"_container div.ml_freespeaking_actionbox\");\r\n      self.pendingbox = $(\"#\" + self.itemdata.uniqueid + \"_container div.ml_freespeaking_pendingbox\");\r\n      self.resultsbox = $(\"#\" + self.itemdata.uniqueid + \"_container div.ml_freespeaking_resultsbox\");\r\n      self.timerdisplay = $(\"#\" + self.itemdata.uniqueid + \"_container div.ml_freespeaking_timerdisplay\");\r\n\r\n      // Callback: Recorder updates.\r\n      var recorderCallback = function(message) {\r\n\r\n        switch (message.type) {\r\n          case 'recording':\r\n            break;\r\n\r\n          case 'interimspeech':\r\n            var wordcount = self.quizhelper.count_words(message.capturedspeech);\r\n            self.wordcount.text(wordcount);\r\n            break;\r\n\r\n          case 'speech':\r\n            log.debug(\"speech at free speaking\");\r\n            var speechtext = message.capturedspeech;\r\n\r\n            //update the wordcount\r\n            var wordcount = self.quizhelper.count_words(speechtext);\r\n            self.wordcount.text(wordcount);\r\n\r\n            self.do_evaluation(speechtext);    \r\n        } //end of switch message type\r\n      };\r\n\r\n      if(quizhelper.use_ttrecorder()) {\r\n          //init tt recorder\r\n          var opts = {};\r\n          opts.uniqueid = itemdata.uniqueid;\r\n          opts.callback = recorderCallback;\r\n          opts.shadow = false;\r\n          opts.stt_guided=false;\r\n          self.ttrec = ttrecorder.clone();\r\n          self.ttrec.init(opts);\r\n\r\n      }else{\r\n          //init cloudpoodll push recorder\r\n          cloudpoodll.init('readaloud-recorder-passagereading-' + itemdata.id, recorderCallback);\r\n      }\r\n    }, //end of init components\r\n\r\n    do_corrections_markup: function(grammarerrors,grammarmatches,insertioncount) {\r\n      var self = this;\r\n      //corrected text container is created at runtime, so it wont exist at init_components time\r\n      //thats we find it here \r\n       var correctionscontainer = self.resultsbox.find('.mlfsr_correctedtext');\r\n      \r\n       correctionsmarkup.init({ \"correctionscontainer\": correctionscontainer,\r\n            \"grammarerrors\": grammarerrors,\r\n            \"grammarmatches\": grammarmatches,\r\n            \"insertioncount\": insertioncount});\r\n    },\r\n\r\n    do_evaluation: function(speechtext) {\r\n      var self = this;\r\n\r\n      //show a spinner while we do the AI stuff\r\n      self.resultsbox.hide();\r\n      self.actionbox.hide();\r\n      self.pendingbox.show();\r\n      \r\n      //do evaluation\r\n      this.quizhelper.evaluateTranscript(speechtext,this.itemdata.itemid).then(function(ajaxresult) {\r\n        var transcript_evaluation = JSON.parse(ajaxresult);\r\n        if (transcript_evaluation) {\r\n          //calculate raw score and percent score\r\n          transcript_evaluation.rawscore = self.calculate_score(transcript_evaluation);\r\n          self.rawscore = self.calculate_score(transcript_evaluation);\r\n          if(self.itemdata.totalmarks > 0){\r\n            self.percentscore = Math.round((self.rawscore / self.itemdata.totalmarks) * 100);\r\n          }\r\n          //add raw and percent score to trancript_evaluation for mustache\r\n          transcript_evaluation.rawscore = self.rawscore;\r\n          transcript_evaluation.percentscore = self.percentscore;\r\n          transcript_evaluation.rawspeech = speechtext;\r\n          transcript_evaluation.maxscore = self.itemdata.totalmarks;\r\n          self.transcript_evaluation = transcript_evaluation;\r\n\r\n          log.debug(transcript_evaluation);\r\n          //display results\r\n          templates.render('mod_readaloud/freespeakingresults',transcript_evaluation).then(\r\n            function(html,js){\r\n                self.resultsbox.html(html);\r\n                //do corrections markup\r\n                if(transcript_evaluation.hasOwnProperty('grammarerrors')){\r\n                  self.do_corrections_markup(transcript_evaluation.grammarerrors,\r\n                    transcript_evaluation.grammarmatches,\r\n                    transcript_evaluation.insertioncount\r\n                  );\r\n                }\r\n                //show and hide\r\n                self.resultsbox.show();\r\n                self.pendingbox.hide();\r\n                self.actionbox.hide();\r\n                templates.runTemplateJS(js);\r\n                //reset timer and wordcount on this page, in case reattempt\r\n                self.wordcount.text('0');\r\n                self.ttrec.timer.reset();\r\n                var displaytime = self.ttrec.timer.fetch_display_time();\r\n                self.timerdisplay.html(displaytime);\r\n            }\r\n          );// End of templates\r\n        } else {\r\n          log.debug('transcript_evaluation: oh no it failed');\r\n          self.resultsbox.hide();\r\n          self.pendingbox.hide();\r\n          self.actionbox.show();\r\n        }\r\n      }); \r\n    },\r\n  };\r\n});"],"names":["define","$","log","def","cloudpoodll","ttrecorder","correctionsmarkup","templates","debug","transcript_evaluation","rawscore","percentscore","clone","extend","this","init","index","itemdata","quizhelper","init_components","register_events","next_question","stepdata","hasgrade","totalitems","totalmarks","correctitems","grade","resultsdata","do_next","calculate_score","wordsratio","countwords","stats","words","targetwordcount","relevanceratio","relevance","Math","round","marks","self","uniqueid","on","e","allwords","thebutton","wordcount","actionbox","pendingbox","resultsbox","timerdisplay","recorderCallback","message","type","count_words","capturedspeech","text","speechtext","do_evaluation","use_ttrecorder","opts","callback","shadow","stt_guided","ttrec","id","do_corrections_markup","grammarerrors","grammarmatches","insertioncount","correctionscontainer","find","hide","show","evaluateTranscript","itemid","then","ajaxresult","JSON","parse","rawspeech","maxscore","render","html","js","hasOwnProperty","runTemplateJS","timer","reset","displaytime","fetch_display_time"],"mappings":"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"}