{"version":3,"file":"modelaudiohelper.min.js","sources":["../src/modelaudiohelper.js"],"sourcesContent":["define(['jquery', 'core/log','mod_readaloud/definitions','mod_readaloud/recorderhelper','mod_readaloud/modelaudiokaraoke'], function ($, log, def, recorderhelper, karaoke) {\r\n    \"use strict\"; // jshint ;_;\r\n    /*\r\n    This file helps you get Polly URLs at runtime\r\n     */\r\n\r\n    log.debug('Model Audio helper: initialising');\r\n\r\n    return {\r\n        controls: {},\r\n        currentmode: 'modeling', //previewing //stopped\r\n        breaks: [],\r\n        matches: false,\r\n        goturl: false,\r\n\r\n        //class definitions\r\n        cd: {\r\n            audioplayerclass: def.modelaudioplayerclass,\r\n            wordclass: def.wordclass,\r\n            spaceclass: def.spaceclass,\r\n            endspaceclass: def.endspaceclass,\r\n            passagecontainer: def.passagecontainer,\r\n            breaksfield: def.modelaudiobreaksfield,\r\n            urlfield: def.modelaudiourlfield,\r\n            modeltranscriptbutton: def.modeltranscriptbutton,\r\n            modeltranscript: def.modeltranscript\r\n        },\r\n\r\n        //init the module\r\n        init: function(props){\r\n\r\n            //pick up opts from html\r\n            var theid = '#amdopts_' + props.widgetid;\r\n            var configcontrol = $(theid).get(0);\r\n            if (configcontrol) {\r\n                var opts = JSON.parse(configcontrol.value);\r\n                $(theid).remove();\r\n            } else {\r\n                //if there is no config we might as well give up\r\n                log.debug('Read Aloud model audio Controller: No config found on page. Giving up.');\r\n                return;\r\n            }\r\n\r\n            if(opts.modelaudiobreaks) {\r\n                this.breaks=JSON.parse(opts.modelaudiobreaks);\r\n            }\r\n            if(opts.modelaudiomatches) {\r\n                this.matches=JSON.parse(opts.modelaudiomatches);\r\n            }\r\n\r\n            //register the controls\r\n            this.register_controls();\r\n            //register the events\r\n            this.register_events();\r\n            //markup passage\r\n            this.markup_passage();\r\n            //load recorder\r\n            this.init_recorder(opts);\r\n\r\n            //init karaoke\r\n            this.init_karaoke();\r\n\r\n            //if it looks like we have a human audio, do a transcript check\r\n            var audiourl = this.controls.audioplayer.attr('src');\r\n            if(audiourl != null && !audiourl.includes('poodllfile.poodll.net')) {\r\n                //this transcript check needs work. for now lets ignore it\r\n                //this.check_modelaudio_transcript_ready(audiourl, 5000)\r\n            }\r\n        },\r\n\r\n        init_karaoke: function(){\r\n          var karaoke_opts={audioplayerclass: this.cd.audioplayerclass, modeling: true};\r\n          karaoke.init(karaoke_opts);\r\n          karaoke.set_breaks(this.breaks);\r\n        },\r\n\r\n        init_recorder: function(opts){\r\n            var that =this;\r\n            var on_recording_start=function(eventdata){\r\n                that.goturl=false;\r\n            };\r\n            var on_recording_end=function(eventdata){};\r\n            var on_audio_processing=function(eventdata){\r\n                if(!that.goturl) {\r\n                    that.controls.urlfield.val(eventdata.mediaurl);\r\n                    that.goturl = true;\r\n                }\r\n            };\r\n\r\n            //init the recorder\r\n            recorderhelper.init(opts,\r\n                on_recording_start,\r\n                on_recording_end,\r\n                on_audio_processing);\r\n        },\r\n\r\n        //load all the controls so we do not have to do it later\r\n        register_controls: function(){\r\n            this.controls.audioplayer = $('#' + this.cd.audioplayerclass);\r\n            this.controls.eachword = $('.' + this.cd.wordclass);\r\n            this.controls.eachspace = $('.' + this.cd.spaceclass);\r\n            this.controls.passagecontainer = $(\".\" + this.cd.passagecontainer);\r\n            this.controls.breaksfield = $(\"#\" + this.cd.breaksfield);\r\n            this.controls.urlfield = $(\"#\" + this.cd.urlfield);\r\n            this.controls.modeltranscript = $(\"#\" + this.cd.modeltranscript);\r\n            this.controls.modeltranscriptbutton = $(\"#\" + this.cd.modeltranscriptbutton);\r\n        },\r\n\r\n        //attach the various event handlers we need\r\n        register_events: function(){\r\n            var that = this;\r\n\r\n            var clickhandler = function () {\r\n\r\n                if (that.currentmode === 'modeling') {\r\n                    var wordnumber = parseInt($(this).attr('data-wordnumber'));\r\n                    var nextspace = $('#' + that.cd.spaceclass + '_' + wordnumber);\r\n                    if(nextspace.hasClass(that.cd.endspaceclass)){\r\n                        that.remove_break(wordnumber);\r\n                        nextspace.removeClass(that.cd.endspaceclass);\r\n                    }else {\r\n                        nextspace.addClass(that.cd.endspaceclass);\r\n                        var theplayer = that.controls.audioplayer[0];\r\n                        var audiotime = that.fetch_break_audiotime(wordnumber, theplayer, that.matches);\r\n                        that.register_break(wordnumber, audiotime);\r\n                    }\r\n                }\r\n            };\r\n\r\n            //set break points\r\n            this.controls.eachword.click(clickhandler);\r\n            this.controls.eachspace.click(clickhandler);\r\n\r\n            this.controls.modeltranscriptbutton.click(function(){\r\n                $(this).hide();\r\n                that.controls.modeltranscript.show();\r\n            });\r\n        },\r\n        remove_break: function(wordnumber)\r\n        {\r\n            for(var i=0; i<this.breaks.length; i++) {\r\n                if(this.breaks[i].wordnumber==wordnumber){\r\n                    this.breaks.splice(i,1);\r\n                    break;\r\n                }\r\n            }\r\n            this.controls.breaksfield.val(JSON.stringify(this.breaks));\r\n            karaoke.set_breaks(this.breaks);\r\n            log.debug(this.breaks);\r\n        },\r\n\r\n        register_break: function(wordnumber, audiotime){\r\n            this.breaks.push({'wordnumber': wordnumber, 'audiotime': audiotime});\r\n\r\n            var compare = function( a, b ) {\r\n                if ( a.wordnumber < b.wordnumber ){\r\n                    return -1;\r\n                }\r\n                if (  a.wordnumber >  b.wordnumber ){\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            };\r\n            this.breaks.sort( compare );\r\n\r\n            this.controls.breaksfield.val(JSON.stringify(this.breaks));\r\n            karaoke.set_breaks(this.breaks);\r\n            log.debug(this.breaks);\r\n        },\r\n\r\n        markup_passage: function(){\r\n            for(var i=0; i<this.breaks.length; i++) {\r\n                var wordnumber =this.breaks[i].wordnumber;\r\n                var space =$('#' + this.cd.spaceclass + '_' + wordnumber);\r\n                space.addClass(this.cd.endspaceclass);\r\n            }\r\n\r\n        },\r\n\r\n        player_get_time: function(){\r\n            var theplayer = this.controls.audioplayer[0];\r\n            return theplayer.currentTime;\r\n        },\r\n\r\n        //the break occurs after the current word.  matches array  is 0 based and words array is 1 based\r\n        //So if break 1: word tapped is wordnumber 3, we want the start position of wordnumber 4 as audiotime. That is matches[3].audiostart\r\n        fetch_break_audiotime: function(wordnumber,theplayer, matches){\r\n            if(matches!==false && !$('.mod_readaloud_manualbreaktiming').is(\":checked\")){\r\n                if(matches[wordnumber]){\r\n                    return matches[wordnumber].audiostart;\r\n\r\n                }else{\r\n                    //try five more words, just in case\r\n                    for(var i =1;i<6;i++){\r\n                        if(matches[wordnumber+i]){\r\n                            return matches[wordnumber+i].audiostart;\r\n                        }\r\n                    }\r\n                }\r\n            }else {\r\n                return theplayer.currentTime;\r\n            }\r\n        },\r\n\r\n        check_modelaudio_transcript_ready: function(audiourl,waitms){\r\n            //we commence a series of ping and retries until the recorded file is available\r\n            var that = this;\r\n            $.ajax({\r\n                url: audiourl + '.txt',\r\n                method: 'HEAD',\r\n                cache: false,\r\n                error: function () {\r\n                    //We get here if its a 404 or 403. So settimout here and wait for file to arrive\r\n                    //we increment the timeout period each time to prevent bottlenecks\r\n                    log.debug('403 errors are normal here, till the file arrives back from transcriptoin');\r\n                    setTimeout(function () {\r\n                        that.check_modelaudio_transcript_ready(audiourl, waitms + 5000);\r\n                    }, waitms);\r\n                },\r\n                success: function (data, textStatus, xhr) {\r\n                    switch (xhr.status) {\r\n                        case 200:\r\n                            that.controls.modeltranscript.load(audiourl + '.txt');\r\n                            that.controls.modeltranscriptbutton.show();\r\n                            break;\r\n                        default:\r\n                            setTimeout(function () {\r\n                                that.check_modelaudio_transcript_ready(audiourl, waitms + 5000);\r\n                            }, waitms);\r\n                    }\r\n\r\n                }\r\n            });\r\n        },\r\n\r\n        do_transcription_complete: function(){\r\n\r\n        }\r\n\r\n    };//end of return value\r\n});"],"names":["define","$","log","def","recorderhelper","karaoke","debug","controls","currentmode","breaks","matches","goturl","cd","audioplayerclass","modelaudioplayerclass","wordclass","spaceclass","endspaceclass","passagecontainer","breaksfield","modelaudiobreaksfield","urlfield","modelaudiourlfield","modeltranscriptbutton","modeltranscript","init","props","theid","widgetid","configcontrol","get","opts","JSON","parse","value","remove","modelaudiobreaks","modelaudiomatches","register_controls","register_events","markup_passage","init_recorder","init_karaoke","audiourl","this","audioplayer","attr","includes","karaoke_opts","modeling","set_breaks","that","eventdata","val","mediaurl","eachword","eachspace","clickhandler","wordnumber","parseInt","nextspace","hasClass","remove_break","removeClass","addClass","theplayer","audiotime","fetch_break_audiotime","register_break","click","hide","show","i","length","splice","stringify","push","sort","a","b","player_get_time","currentTime","is","audiostart","check_modelaudio_transcript_ready","waitms","ajax","url","method","cache","error","setTimeout","success","data","textStatus","xhr","status","load","do_transcription_complete"],"mappings":"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"}