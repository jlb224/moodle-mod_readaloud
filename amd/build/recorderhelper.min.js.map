{"version":3,"sources":["../src/recorderhelper.js"],"names":["define","$","log","cloudpoodll","debug","status","init","opts","on_recording_start","on_recording_end","on_audio_processing","on_speech","that","recid","message","console","type","action","startbuttonclick","stopbuttonclick","alert"],"mappings":"AAAAA,OAAM,gCAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,iCAAvB,CAAD,CAA4D,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAA+B,CAC7F,aAKAD,CAAG,CAACE,KAAJ,CAAU,gCAAV,EAEA,MAAO,CAEHC,MAAM,CAAE,SAFL,CAIHC,IAAI,CAAE,cAAUC,CAAV,CAAgBC,CAAhB,CACUC,CADV,CAEUC,CAFV,CAGUC,CAHV,CAGqB,IAEnBC,CAAAA,CAAI,CAAG,IAFY,CAGnBC,CAAK,CAACN,CAAI,WAHS,CAIvBJ,CAAW,CAACG,IAAZ,CAAiBO,CAAjB,CAGI,SAAUC,CAAV,CAAmB,CAEfC,OAAO,CAACb,GAAR,CAAY,WAAZ,CAAwBY,CAAxB,EACA,OAAQA,CAAO,CAACE,IAAhB,EACI,IAAK,WAAL,CACI,GAAuB,SAAnB,GAAAF,CAAO,CAACG,MAAZ,CAAkC,CAC9BL,CAAI,CAACM,gBAAL,GACAV,CAAkB,CAACM,CAAD,CAErB,CAJD,IAIO,IAAuB,SAAnB,GAAAA,CAAO,CAACG,MAAZ,CAAkC,CACrCL,CAAI,CAACO,eAAL,GACAV,CAAgB,CAACK,CAAD,CACnB,CACD,MACJ,IAAK,oBAAL,CAEI,GAAoB,QAAhB,GAAAF,CAAI,CAACP,MAAT,CAA8B,CAC1BK,CAAmB,CAACI,CAAD,CACtB,CACDF,CAAI,CAACP,MAAL,CAAc,QAAd,CACA,MACJ,IAAK,QAAL,CACQM,CAAS,CAACG,CAAD,CAAT,CACJ,MACJ,IAAK,OAAL,CACIM,KAAK,CAAC,WAAaN,CAAO,CAACA,OAAtB,CAAL,CACA,MAvBR,CAyBH,CA/BL,CAiCH,CA5CE,CA6CHK,eAAe,CAAE,0BAAY,CACzB,KAAKd,MAAL,CAAc,SAEjB,CAhDE,CAiDHa,gBAAgB,CAAE,2BAAY,CAC1B,KAAKb,MAAL,CAAc,SAEjB,CApDE,CAuDV,CA/DK,CAAN","sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/cloudpoodllloader'], function ($, log, cloudpoodll) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file sets up the cloud poodll recorder and passes on events to registered handlers\n     */\n\n    log.debug('Readaloud helper: initialising');\n\n    return {\n\n        status: 'stopped',\n\n        init: function (opts, on_recording_start,\n                        on_recording_end,\n                        on_audio_processing,\n                        on_speech) {\n\n            var that = this;\n            var recid=opts['recorderid'];\n            cloudpoodll.init(recid,\n\n\n                function (message) {\n\n                    console.log('rechelper',message);\n                    switch (message.type) {\n                        case 'recording':\n                            if (message.action === 'started') {\n                                that.startbuttonclick();\n                                on_recording_start(message);\n\n                            } else if (message.action === 'stopped') {\n                                that.stopbuttonclick();\n                                on_recording_end(message);\n                            }\n                            break;\n                        case 'awaitingprocessing':\n                            //awaitingprocessing fires often, but we only want to post once\n                            if (that.status !== 'posted') {\n                                on_audio_processing(message);\n                            }\n                            that.status = 'posted';\n                            break;\n                        case 'speech':\n                                on_speech(message);\n                            break;\n                        case 'error':\n                            alert('PROBLEM:' + message.message);\n                            break;\n                    }\n                }\n            );\n        },\n        stopbuttonclick: function () {\n            this.status = 'stopped';\n            //do something\n        },\n        startbuttonclick: function () {\n            this.status = 'started';\n            //do something\n        }\n\n    };//end of return value\n});"],"file":"recorderhelper.min.js"}