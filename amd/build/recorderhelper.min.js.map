{"version":3,"file":"recorderhelper.min.js","sources":["../src/recorderhelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/cloudpoodllloader'], function ($, log, cloudpoodllloader) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file sets up the cloud poodll recorder and passes on events to registered handlers\n     */\n\n    log.debug('Readaloud helper: initialising');\n\n    return {\n\n        opts: null,\n        status: 'stopped',\n\n        reset: function () {\n            var container = $('#' + this.opts['recorderid']);\n            container.attr('data-alreadyparsed', 'false');\n            container.html('');\n        },\n\n        init: function (opts, on_recording_start,\n                        on_recording_end,\n                        on_audio_processing,\n                        on_speech) {\n\n            var that = this;\n            that.opts = opts;\n            var recid = opts['recorderid'];\n            cloudpoodllloader.init(recid,\n                function (message) {\n                    switch (message.type) {\n                        case 'recording':\n                            if (message.action === 'started') {\n                                that.startbuttonclick();\n                                on_recording_start(message);\n\n                            } else if (message.action === 'stopped') {\n                                that.stopbuttonclick();\n                                on_recording_end(message);\n                            }\n                            break;\n                        case 'awaitingprocessing':\n                            //awaitingprocessing fires often, but we only want to post once\n                            if (that.status !== 'posted') {\n                                on_audio_processing(message);\n                            }\n                            that.status = 'posted';\n                            break;\n                        case 'speech':\n                                on_speech(message);\n                            break;\n                        case 'error':\n                            alert('PROBLEM:' + message.message);\n                            break;\n                    }\n                }\n            );\n        },\n        stopbuttonclick: function () {\n            this.status = 'stopped';\n            //do something\n        },\n        startbuttonclick: function () {\n            this.status = 'started';\n            //do something\n        }\n\n    };//end of return value\n});"],"names":["define","$","log","cloudpoodllloader","debug","opts","status","reset","container","this","attr","html","init","on_recording_start","on_recording_end","on_audio_processing","on_speech","that","recid","message","type","action","startbuttonclick","stopbuttonclick","alert"],"mappings":"AAAAA,sCAAO,CAAC,SAAU,WAAY,oCAAoC,SAAUC,EAAGC,IAAKC,0BAMhFD,IAAIE,MAAM,kCAEH,CAEHC,KAAM,KACNC,OAAQ,UAERC,MAAO,eACCC,UAAYP,EAAE,IAAMQ,KAAKJ,KAAL,YACxBG,UAAUE,KAAK,qBAAsB,SACrCF,UAAUG,KAAK,KAGnBC,KAAM,SAAUP,KAAMQ,mBACNC,iBACAC,oBACAC,eAERC,KAAOR,KACXQ,KAAKZ,KAAOA,SACRa,MAAQb,KAAI,WAChBF,kBAAkBS,KAAKM,OACnB,SAAUC,gBACEA,QAAQC,UACP,YACsB,YAAnBD,QAAQE,QACRJ,KAAKK,mBACLT,mBAAmBM,UAEO,YAAnBA,QAAQE,SACfJ,KAAKM,kBACLT,iBAAiBK,oBAGpB,qBAEmB,WAAhBF,KAAKX,QACLS,oBAAoBI,SAExBF,KAAKX,OAAS,mBAEb,SACGU,UAAUG,mBAEb,QACDK,MAAM,WAAaL,QAAQA,cAM/CI,gBAAiB,gBACRjB,OAAS,WAGlBgB,iBAAkB,gBACThB,OAAS"}