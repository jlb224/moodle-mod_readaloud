{"version":3,"file":"ttmsspeech.min.js","sources":["../src/ttmsspeech.js"],"sourcesContent":["define(['jquery', \r\n    'core/log'], \r\n    function ($, log) {\r\n    \r\n   \"use strict\"; // jshint ;_;\r\n    /*\r\n    This file streams to msspeech and collects the response. \r\n     */\r\n\r\n    log.debug('MS Speech initialising');\r\n\r\n    return {\r\n\r\n        thetoken: null,\r\n        theregion: null,\r\n        thelanguage: null,\r\n        thereferencetext: null,\r\n        speechsdk: null,\r\n\r\n        //for making multiple instances\r\n        clone: function () {\r\n            return $.extend(true, {}, this);\r\n        },\r\n\r\n        init: function(mstoken, msregion, mslanguage, referencetext) {\r\n            var that = this;\r\n            this.thetoken = mstoken;\r\n            this.theregion = msregion;\r\n            this.thelanguage = mslanguage;\r\n            this.thereferencetext = referencetext;\r\n            log.debug('MS Speech init');\r\n            if(!window.hasOwnProperty('SpeechSDK')){ \r\n                log.debug('MS Speech loading');\r\n                $.getScript('https://aka.ms/csspeech/jsbrowserpackageraw', function(){\r\n                    log.debug('MS Speech loaded');\r\n                    that.speechsdk = window.SpeechSDK;\r\n                    log.debug(that.speechsdk);\r\n                });\r\n            }\r\n        },\r\n\r\n        recognize: function(blob, callback) {\r\n            var that = this;\r\n            \r\n          //MS Speech SDK requires the audio to be in wav format and to have a name field\r\n          blob.name = 'audio.wav';\r\n          let audioConfig = that.speechsdk.AudioConfig.fromWavFileInput(blob,blob.name);\r\n\r\n          var speechConfig = that.speechsdk.SpeechConfig.fromAuthorizationToken(that.thetoken, that.theregion);\r\n          speechConfig.speechRecognitionLanguage = that.thelanguage;\r\n\r\n          //need to pass this in, better\r\n          var referencetext = that.thereferencetext;\r\n\r\n          // create pronunciation assessment config, set grading system, granularity and if enable miscue based on your requirement.\r\n          const pronunciationAssessmentConfig = new that.speechsdk.PronunciationAssessmentConfig(\r\n              referencetext,\r\n              that.speechsdk.PronunciationAssessmentGradingSystem.HundredMark,\r\n              that.speechsdk.PronunciationAssessmentGranularity.Phoneme,\r\n              true\r\n          );\r\n          pronunciationAssessmentConfig.enableProsodyAssessment = true;\r\n\r\n          // create the speech recognizer.\r\n          var reco = new that.speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n          // (Optional) get the session ID\r\n          reco.sessionStarted = (_s, e) => {\r\n              console.log(`SESSION ID: ${e.sessionId}`);\r\n          };\r\n          pronunciationAssessmentConfig.applyTo(reco);\r\n\r\n          reco.recognizeOnceAsync(\r\n              function (speechRecognitionResult) {\r\n                    // The pronunciation assessment result as a Speech SDK object\r\n                    var pronunciationAssessmentResult = that.speechsdk.PronunciationAssessmentResult.fromResult(speechRecognitionResult);\r\n                    // The pronunciation assessment result as a JSON string\r\n                    //var pronunciationAssessmentResultJson = speechRecognitionResult.properties.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult);\r\n                  callback(pronunciationAssessmentResult);\r\n              },\r\n              function (err) {\r\n                  console.log(\"ERROR: \" + err);\r\n                  exit();\r\n              }\r\n          );\r\n        },\r\n\r\n        on_recognition: function(){\r\n\r\n        },\r\n\r\n     }\r\n\r\n});"],"names":["define","$","log","debug","thetoken","theregion","thelanguage","thereferencetext","speechsdk","clone","extend","this","init","mstoken","msregion","mslanguage","referencetext","that","window","hasOwnProperty","getScript","SpeechSDK","recognize","blob","callback","name","audioConfig","AudioConfig","fromWavFileInput","speechConfig","SpeechConfig","fromAuthorizationToken","speechRecognitionLanguage","pronunciationAssessmentConfig","PronunciationAssessmentConfig","PronunciationAssessmentGradingSystem","HundredMark","PronunciationAssessmentGranularity","Phoneme","enableProsodyAssessment","reco","SpeechRecognizer","sessionStarted","_s","e","console","sessionId","applyTo","recognizeOnceAsync","speechRecognitionResult","pronunciationAssessmentResult","PronunciationAssessmentResult","fromResult","err","exit","on_recognition"],"mappings":"AAAAA,kCAAO,CAAC,SACJ,aACA,SAAUC,EAAGC,YAObA,IAAIC,MAAM,0BAEH,CAEHC,SAAU,KACVC,UAAW,KACXC,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KAGXC,MAAO,kBACIR,EAAES,QAAO,EAAM,GAAIC,OAG9BC,KAAM,SAASC,QAASC,SAAUC,WAAYC,mBACtCC,KAAON,UACNP,SAAWS,aACXR,UAAYS,cACZR,YAAcS,gBACdR,iBAAmBS,cACxBd,IAAIC,MAAM,kBACNe,OAAOC,eAAe,eACtBjB,IAAIC,MAAM,qBACVF,EAAEmB,UAAU,+CAA+C,WACvDlB,IAAIC,MAAM,oBACVc,KAAKT,UAAYU,OAAOG,UACxBnB,IAAIC,MAAMc,KAAKT,gBAK3Bc,UAAW,SAASC,KAAMC,cAClBP,KAAON,KAGbY,KAAKE,KAAO,gBACRC,YAAcT,KAAKT,UAAUmB,YAAYC,iBAAiBL,KAAKA,KAAKE,UAEpEI,aAAeZ,KAAKT,UAAUsB,aAAaC,uBAAuBd,KAAKb,SAAUa,KAAKZ,WAC1FwB,aAAaG,0BAA4Bf,KAAKX,gBAG1CU,cAAgBC,KAAKV,uBAGnB0B,8BAAgC,IAAIhB,KAAKT,UAAU0B,8BACrDlB,cACAC,KAAKT,UAAU2B,qCAAqCC,YACpDnB,KAAKT,UAAU6B,mCAAmCC,SAClD,GAEJL,8BAA8BM,yBAA0B,MAGpDC,KAAO,IAAIvB,KAAKT,UAAUiC,iBAAiBZ,aAAcH,aAE7Dc,KAAKE,eAAiB,CAACC,GAAIC,KACvBC,QAAQ3C,IAAK,eAAc0C,EAAEE,cAEjCb,8BAA8Bc,QAAQP,MAEtCA,KAAKQ,oBACD,SAAUC,6BAEAC,8BAAgCjC,KAAKT,UAAU2C,8BAA8BC,WAAWH,yBAG9FzB,SAAS0B,kCAEb,SAAUG,KACNR,QAAQ3C,IAAI,UAAYmD,KACxBC,WAKVC,eAAgB"}