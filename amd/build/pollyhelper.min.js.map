{"version":3,"file":"pollyhelper.min.js","sources":["../src/pollyhelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/definitions'], function ($, log, def) {\r\n    \"use strict\"; // jshint ;_;\r\n    /*\r\n    This file helps you get Polly URLs at runtime\r\n     */\r\n\r\n    log.debug('Polly helper: initialising');\r\n\r\n    return {\r\n        token:  '',\r\n        region: '',\r\n        owner: '',\r\n\r\n        init: function(token, region, owner){\r\n            this.token =token;\r\n            this.region=region;\r\n            this.owner=owner;\r\n        },\r\n\r\n        can_speak_neural: function(voice,region){\r\n            switch(region){\r\n                case \"useast1\":\r\n                case \"tokyo\":\r\n                case \"sydney\":\r\n                case \"dublin\":\r\n                case \"ottawa\":\r\n                case \"frankfurt\":\r\n                case \"london\":\r\n                case \"singapore\":\r\n                case \"capetown\":\r\n                    //ok\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            //check if the voice is supported\r\n            if(def.neural_voices.indexOf(voice) !== -1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n        },\r\n\r\n        fetch_polly_url: function(speaktext,voiceoption, voice) {\r\n            var that = this;\r\n            return new Promise(function(resolve,reject){\r\n                //The REST API we are calling\r\n                var functionname = 'local_cpapi_fetch_polly_url';\r\n\r\n                //fetch the Posturl. We need this.\r\n                //set up our ajax request\r\n                var xhr = new XMLHttpRequest();\r\n\r\n                //set up our handler for the response\r\n                xhr.onreadystatechange = function (e) {\r\n                    if (this.readyState === 4) {\r\n                        if (xhr.status == 200) {\r\n\r\n                            //get a yes or forgetit or tryagain\r\n                            var payload = xhr.responseText;\r\n                            var payloadobject = JSON.parse(payload);\r\n                            if (payloadobject) {\r\n                                //returnCode > 0  indicates an error\r\n                                if (payloadobject.returnCode > 0) {\r\n                                    reject(payloadobject.returnMessage);\r\n                                    log.debug(payloadobject.returnMessage);\r\n                                    return false;\r\n                                    //if all good, then lets do the embed\r\n                                } else if (payloadobject.returnCode === 0){\r\n                                    var pollyurl = payloadobject.returnMessage;\r\n                                    resolve(pollyurl);\r\n                                } else {\r\n                                    reject('Polly Signed URL Request failed:');\r\n                                    log.debug('Polly Signed URL Request failed:');\r\n                                    log.debug(payloadobject);\r\n                                }\r\n                            } else {\r\n                                reject('Polly Signed URL Request something bad happened');\r\n                                log.debug('Polly Signed URL Request something bad happened');\r\n                            }\r\n                        } else {\r\n                            reject('Polly Signed URL Request Not 200 response:' + xhr.status);\r\n                            log.debug('Polly Signed URL Request Not 200 response:' + xhr.status);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                //in the case we get a bad voice we just reject without calling the web service\r\n                if(voice == 'ttsnone'){\r\n                    reject('Polly Signed URL Request: ttsnone is not a valid voice');\r\n                    log.debug('Polly Signed URL Request: ttsnone is not a valid voice');\r\n                }\r\n\r\n                //now look at voice options (Speed basically)\r\n                var texttype='ssml';\r\n                switch(parseInt(voiceoption)){\r\n\r\n                    //slow\r\n                    case 1:\r\n                        //fetch slightly slower version of speech\r\n                        //rate = 'slow' or 'x-slow' or 'medium'\r\n                        speaktext =that.clean_ssml_chars(speaktext);\r\n                        speaktext = '<speak><break time=\"1000ms\"></break><prosody rate=\"slow\">' + speaktext + '</prosody></speak>';\r\n                        break;\r\n                    //veryslow\r\n                    case 2:\r\n                        //fetch slightly slower version of speech\r\n                        //rate = 'slow' or 'x-slow' or 'medium'\r\n                        speaktext =that.clean_ssml_chars(speaktext);\r\n                        speaktext = '<speak><break time=\"1000ms\"></break><prosody rate=\"x-slow\">' + speaktext + '</prosody></speak>';\r\n                        break;\r\n                    //ssml\r\n                    case 3:\r\n                        speaktext='<speak>' + speaktext + '</speak>';\r\n                        break;\r\n\r\n                    //normal\r\n                    case 0:\r\n                    default:\r\n                        //fetch slightly slower version of speech\r\n                        //rate = 'slow' or 'x-slow' or 'medium'\r\n                        speaktext =that.clean_ssml_chars(speaktext);\r\n                        speaktext = '<speak><break time=\"1000ms\"></break>' + speaktext + '</speak>';\r\n                        break;\r\n\r\n                }\r\n\r\n                //to use the neural or standard synthesis engine\r\n                var engine = that.can_speak_neural(voice,that.region) ?'neural' : 'standard';\r\n\r\n                //log.debug(params);\r\n                var xhrparams = \"wstoken=\" + that.token\r\n                + \"&wsfunction=\" + functionname\r\n                + \"&moodlewsrestformat=\" + 'json'\r\n                + \"&text=\" + encodeURIComponent(speaktext)\r\n                + '&texttype=' + texttype\r\n                + '&voice=' + voice\r\n                + '&appid=' + def.component\r\n                + '&owner=' + that.owner\r\n                + '&region=' + that.region\r\n                + '&engine=' + engine;\r\n\r\n                var serverurl = 'https://cloud.poodll.com' + \"/webservice/rest/server.php\";\r\n                xhr.open(\"POST\", serverurl, true);\r\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                xhr.send(xhrparams);\r\n            });\r\n        },\r\n\r\n        request_polly_url: function(speaktext,texttype, voice) {\r\n\r\n                //The REST API we are calling\r\n                var functionname = 'local_cpapi_fetch_polly_url';\r\n\r\n                //fetch the Posturl. We need this.\r\n                //set up our ajax request\r\n                var xhr = new XMLHttpRequest();\r\n                var that = this;\r\n\r\n                //in the case we get a bad voice we just reject without calling the web service\r\n                if(voice == 'ttsnone'){\r\n                    log.debug('Polly Signed URL Request: ttsnone is not a valid voice');\r\n                    return false;\r\n                }\r\n\r\n                //set up our handler for the response\r\n                xhr.onreadystatechange = function (e) {\r\n                    if (this.readyState === 4) {\r\n                        if (xhr.status == 200) {\r\n\r\n                            //get a yes or forgetit or tryagain\r\n                            var payload = xhr.responseText;\r\n                            var payloadobject = JSON.parse(payload);\r\n                            if (payloadobject) {\r\n                                //returnCode > 0  indicates an error\r\n                                if (payloadobject.returnCode > 0) {\r\n                                    log.debug(payloadobject.returnMessage);\r\n                                    return false;\r\n                                    //if all good, then lets do the embed\r\n                                } else if (payloadobject.returnCode === 0){\r\n                                    var pollyurl = payloadobject.returnMessage;\r\n                                    that.onnewpollyurl(pollyurl);\r\n                                } else {\r\n                                    log.debug('Polly Signed URL Request failed:');\r\n                                    log.debug(payloadobject);\r\n                                }\r\n                            } else {\r\n                                log.debug('Polly Signed URL Request something bad happened');\r\n                            }\r\n                        } else {\r\n                            log.debug('Polly Signed URL Request Not 200 response:' + xhr.status);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                //log.debug(params);\r\n                var xhrparams = \"wstoken=\" + this.token\r\n                + \"&wsfunction=\" + functionname\r\n                + \"&moodlewsrestformat=\" + 'json'\r\n                + \"&text=\" + encodeURIComponent(speaktext)\r\n                + '&texttype=' + texttype\r\n                + '&voice=' + voice\r\n                + '&appid=' + 'mod_readaloud'\r\n                + '&owner=' + this.owner\r\n                + '&region=' + this.region;\r\n\r\n                var serverurl = 'https://cloud.poodll.com' + \"/webservice/rest/server.php\";\r\n                xhr.open(\"POST\", serverurl, true);\r\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                xhr.send(xhrparams);\r\n        },\r\n\r\n        clean_ssml_chars: function(speaktext){\r\n            //deal with SSML reserved characters\r\n            speaktext =  speaktext.replace(/&/g,'&amp;');\r\n            speaktext = speaktext.replace(/'/g,'&apos;');\r\n            speaktext= speaktext.replace(/\"/g,'&quot;');\r\n            speaktext = speaktext.replace(/</g,'&lt;');\r\n            speaktext =  speaktext.replace(/>/g,'&gt;');\r\n            return speaktext;\r\n        },\r\n\r\n        onnewpollyurl: function (pollyurl) {\r\n            //do something\r\n            log.debug(pollyurl);\r\n        },\r\n\r\n    };//end of return value\r\n});"],"names":["define","$","log","def","debug","token","region","owner","init","can_speak_neural","voice","neural_voices","indexOf","fetch_polly_url","speaktext","voiceoption","that","this","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","e","readyState","status","payload","responseText","payloadobject","JSON","parse","returnCode","returnMessage","pollyurl","parseInt","clean_ssml_chars","engine","xhrparams","encodeURIComponent","component","open","setRequestHeader","send","request_polly_url","texttype","onnewpollyurl","replace"],"mappings":"AAAAA,mCAAO,CAAC,SAAU,WAAY,8BAA8B,SAAUC,EAAGC,IAAKC,YAM1ED,IAAIE,MAAM,8BAEH,CACHC,MAAQ,GACRC,OAAQ,GACRC,MAAO,GAEPC,KAAM,SAASH,MAAOC,OAAQC,YACrBF,MAAOA,WACPC,OAAOA,YACPC,MAAMA,OAGfE,iBAAkB,SAASC,MAAMJ,eACtBA,YACE,cACA,YACA,aACA,aACA,aACA,gBACA,aACA,gBACA,gCAIM,SAI0B,IAAtCH,IAAIQ,cAAcC,QAAQF,QAQjCG,gBAAiB,SAASC,UAAUC,YAAaL,WACzCM,KAAOC,YACJ,IAAIC,SAAQ,SAASC,QAAQC,YAM5BC,IAAM,IAAIC,eAGdD,IAAIE,mBAAqB,SAAUC,MACP,IAApBP,KAAKQ,cACa,KAAdJ,IAAIK,OAAe,KAGfC,QAAUN,IAAIO,aACdC,cAAgBC,KAAKC,MAAMJ,YAC3BE,cAAe,IAEXA,cAAcG,WAAa,SAC3BZ,OAAOS,cAAcI,eACrB/B,IAAIE,MAAMyB,cAAcI,gBACjB,EAEJ,GAAiC,IAA7BJ,cAAcG,WAAiB,KAClCE,SAAWL,cAAcI,cAC7Bd,QAAQe,eAERd,OAAO,oCACPlB,IAAIE,MAAM,oCACVF,IAAIE,MAAMyB,oBAGdT,OAAO,mDACPlB,IAAIE,MAAM,wDAGdgB,OAAO,6CAA+CC,IAAIK,QAC1DxB,IAAIE,MAAM,6CAA+CiB,IAAIK,SAM7D,WAAThB,QACCU,OAAO,0DACPlB,IAAIE,MAAM,kEAKP+B,SAASpB,mBAGP,EAIDD,UAAY,6DADZA,UAAWE,KAAKoB,iBAAiBtB,YACqD,gCAGrF,EAIDA,UAAY,+DADZA,UAAWE,KAAKoB,iBAAiBtB,YACuD,gCAGvF,EACDA,UAAU,UAAYA,UAAY,yBASlCA,UAAY,wCADZA,UAAWE,KAAKoB,iBAAiBtB,YACgC,eAMrEuB,OAASrB,KAAKP,iBAAiBC,MAAMM,KAAKV,QAAS,SAAW,WAG9DgC,UAAY,WAAatB,KAAKX,MAAlB,wEAGHkC,mBAAmBzB,WAHhB,wBAKFJ,MACZ,UAAYP,IAAIqC,UAChB,UAAYxB,KAAKT,MACjB,WAAaS,KAAKV,OAClB,WAAa+B,OAGfhB,IAAIoB,KAAK,OADO,uDACY,GAC5BpB,IAAIqB,iBAAiB,gBAAiB,YACtCrB,IAAIqB,iBAAiB,eAAgB,qCACrCrB,IAAIsB,KAAKL,eAIjBM,kBAAmB,SAAS9B,UAAU+B,SAAUnC,WAOpCW,IAAM,IAAIC,eACVN,KAAOC,QAGC,WAATP,aACCR,IAAIE,MAAM,2DACH,EAIXiB,IAAIE,mBAAqB,SAAUC,MACP,IAApBP,KAAKQ,cACa,KAAdJ,IAAIK,OAAe,KAGfC,QAAUN,IAAIO,aACdC,cAAgBC,KAAKC,MAAMJ,YAC3BE,cAAe,IAEXA,cAAcG,WAAa,SAC3B9B,IAAIE,MAAMyB,cAAcI,gBACjB,EAEJ,GAAiC,IAA7BJ,cAAcG,WAAiB,KAClCE,SAAWL,cAAcI,cAC7BjB,KAAK8B,cAAcZ,eAEnBhC,IAAIE,MAAM,oCACVF,IAAIE,MAAMyB,oBAGd3B,IAAIE,MAAM,wDAGdF,IAAIE,MAAM,6CAA+CiB,IAAIK,aAMrEY,UAAY,WAAarB,KAAKZ,MAAlB,wEAGHkC,mBAAmBzB,WAC9B,aAAe+B,SACf,UAAYnC,MALE,8BAOFO,KAAKV,MACjB,WAAaU,KAAKX,OAGpBe,IAAIoB,KAAK,OADO,uDACY,GAC5BpB,IAAIqB,iBAAiB,gBAAiB,YACtCrB,IAAIqB,iBAAiB,eAAgB,qCACrCrB,IAAIsB,KAAKL,YAGjBF,iBAAkB,SAAStB,kBAMvBA,WADAA,WADAA,WADAA,WADAA,UAAaA,UAAUiC,QAAQ,KAAK,UACdA,QAAQ,KAAK,WACdA,QAAQ,KAAK,WACZA,QAAQ,KAAK,SACZA,QAAQ,KAAK,SAIxCD,cAAe,SAAUZ,UAErBhC,IAAIE,MAAM8B"}