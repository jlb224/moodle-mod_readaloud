{"version":3,"file":"passagemarkuphelper.min.js","sources":["../src/passagemarkuphelper.js"],"sourcesContent":["define(['jquery', 'core/log','mod_readaloud/definitions'],\n    function ($, log, def) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Click to hear: initialising');\n\n    return {\n        //controls\n        controls: {},\n        //the passage (jquery object)\n        passage: null,\n        allwords: null,\n        allspaces: null,\n\n        //class definitions\n        cd: {\n            wordclass: def.wordclass,\n            spaceclass: def.spaceclass,\n            badwordclass: def.badwordclass,\n            endspaceclass: def.endspaceclass,\n            unreadwordclass: def.unreadwordclass,\n            unreadspaceclass: def.unreadspaceclass,\n            aiunmatched: def.aiunmatched,\n            passagecontainer: def.passagecontainer,\n            fullreportcontainer: def.fullreportcontainer,\n        },\n\n        //init the module\n        init: function(passage){\n            this.passage=passage;\n            this.allwords = this.passage.find('.' + this.cd.wordclass);\n            this.allspaces = this.passage.find('.' + this.cd.spaceclass);\n        },\n\n        clear_markup: function () {\n            var that = this;\n            that.allspaces.removeClass(that.cd.endspaceclass);\n            that.allspaces.removeClass(that.cd.unreadspaceclass);\n            that.allwords.removeClass(that.cd.aiunmatched);\n            that.allwords.removeClass(that.cd.unreadwordclass);\n            that.allwords.removeClass(that.cd.badwordclass);\n        },\n\n        get_word: function (wordnumber) {\n            return this.passage.find('.' + this.cd.wordclass + '[data-wordnumber=' + wordnumber + ']');\n        },\n\n        get_space: function (wordnumber) {\n            return this.passage.find('.' + this.cd.spaceclass + '[data-wordnumber=' + wordnumber + ']');\n        },\n\n        markup_passage: function (sessionmatches,sessionerrors, sessionendword) {\n           // this.markup_aiunmatchedwords(sessionmatches, sessionendword);\n            this.markup_badwords(sessionerrors);\n            this.markup_endword(sessionendword);\n            this.mark_unreadwords(sessionendword);\n        },\n\n        markup_badwords: function(errorwords) {\n            log.debug('doing bad words');\n            var that = this;\n            $.each(errorwords, function (index) {\n                log.debug(' bad word: index: ' + index + ' wordnumber: ' + errorwords[index].wordnumber);\n                that.get_word(errorwords[index].wordnumber).addClass(that.cd.badwordclass);\n            });\n        },\n\n        markup_endword: function (endwordnumber) {\n            var that = this;\n            that.get_space(endwordnumber).addClass(this.cd.endspaceclass);\n        },\n\n        //mark up all unmatched words as aiunmatched\n        markup_aiunmatchedwords: function (sessionmatches, endwordnumber) {\n            var that = this;\n            if (sessionmatches) {\n                var prevmatch = 0;\n                $.each(sessionmatches, function (index, match) {\n                    var unmatchedcount = index - prevmatch - 1;\n                    if (unmatchedcount > 0) {\n                        for (var errorword = 1; errorword < unmatchedcount + 1; errorword++) {\n                            var wordnumber = prevmatch + errorword;\n                            that.get_word(wordnumber).addClass(that.cd.aiunmatched);\n                        }\n                    }\n                    prevmatch = parseInt(index);\n                });\n\n                //mark all words from last matched word to the end as aiunmatched\n                for (var errorwordnumber = prevmatch + 1; errorwordnumber <= endwordnumber; errorwordnumber++) {\n                    that.get_word(errorwordnumber).addClass(that.cd.aiunmatched);\n                }\n            }\n        },\n\n        markup_aiunmatchedspaces: function () {\n            var that = this;\n            $('.' + this.cd.wordclass + '.' + this.cd.aiunmatched).each(function (index) {\n                var wordnumber = parseInt($(this).attr('data-wordnumber'));\n                if (that.get_word(wordnumber + 1).hasClass(that.cd.aiunmatched)) {\n                    that.get_word(wordnumber).addClass(that.cd.aiunmatched);\n                }\n            });\n        },\n\n        mark_unreadwords: function (endwordnumber) {\n            var that = this;\n            that.allwords.each(function (index) {\n                var wordnumber = $(this).attr('data-wordnumber');\n                var thespace = that.get_space(wordnumber);\n\n                if (Number(wordnumber) > Number(endwordnumber)) {\n                    $(this).addClass(that.cd.unreadwordclass);\n                    thespace.addClass(that.cd.unreadspaceclass);\n\n                    //this will clear badwords after the endmarker\n                    $(this).removeClass(that.cd.badwordclass);\n\n                } else {\n                    $(this).removeClass(that.cd.unreadwordclass);\n                    thespace.removeClass(that.cd.unreadspaceclass);\n                }\n            });\n        },\n    };//end of return value\n});"],"names":["define","$","log","def","debug","controls","passage","allwords","allspaces","cd","wordclass","spaceclass","badwordclass","endspaceclass","unreadwordclass","unreadspaceclass","aiunmatched","passagecontainer","fullreportcontainer","init","this","find","clear_markup","removeClass","get_word","wordnumber","get_space","markup_passage","sessionmatches","sessionerrors","sessionendword","markup_badwords","markup_endword","mark_unreadwords","errorwords","that","each","index","addClass","endwordnumber","markup_aiunmatchedwords","prevmatch","match","unmatchedcount","errorword","parseInt","errorwordnumber","markup_aiunmatchedspaces","attr","hasClass","thespace","Number"],"mappings":"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"}